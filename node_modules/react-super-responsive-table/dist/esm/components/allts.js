var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { createContext, useState, useContext, useEffect, useMemo, forwardRef, } from 'react';
var omit = function (obj, omitProps) {
    return Object.keys(obj)
        .filter(function (key) { return !omitProps.includes(key); })
        .reduce(function (returnObj, key) {
        var _a;
        return __assign(__assign({}, returnObj), (_a = {}, _a[key] = obj[key], _a));
    }, {});
};
var allowed = function (props) {
    return omit(props, ['inHeader', 'columnKey', 'headers', 'forwardedRef']);
};
var HeaderContext = createContext(undefined);
function HeaderProvider(_a) {
    var children = _a.children;
    var _b = useState([]), headers = _b[0], setHeaders = _b[1];
    var contextValue = useMemo(function () { return ({ headers: headers, setHeaders: setHeaders }); }, [headers]);
    return (React.createElement(HeaderContext.Provider, { value: contextValue }, children));
}
export { HeaderProvider, HeaderContext };
var Table = forwardRef(function (_a, ref) {
    var className = _a.className, props = __rest(_a, ["className"]);
    var classes = "".concat(className || '', " responsiveTable");
    return (React.createElement("table", __assign({ "data-testid": "table" }, allowed(props), { className: classes, ref: ref })));
});
Table.displayName = 'Table';
function TableWithHeaderProvider(props) {
    return (React.createElement(HeaderProvider, null,
        React.createElement(Table, __assign({}, props))));
}
function Tbody(props) {
    return React.createElement("tbody", __assign({ "data-testid": "tbody" }, allowed(props)));
}
function Td(props) {
    var context = useContext(HeaderContext);
    if (!context) {
        throw new Error('Td must be used as a child of the Table component');
    }
    var headers = context.headers;
    return React.createElement(TdInner, __assign({}, props, { headers: headers }));
}
function TdInner(props) {
    var headers = props.headers, children = props.children, columnKey = props.columnKey, className = props.className, colSpan = props.colSpan;
    var classes = "".concat(className || '', " pivoted");
    if (colSpan) {
        return (React.createElement("td", __assign({ "data-testid": "td" }, allowed(props))));
    }
    return (React.createElement("td", __assign({ "data-testid": "td" }, allowed(props), { className: classes }),
        React.createElement("div", { "data-testid": "td-before", className: "tdBefore" }, headers[columnKey]), children !== null && children !== void 0 ? children : React.createElement("div", null, "\u00A0")));
}
function Th(props) {
    return (React.createElement("th", __assign({ "data-testid": "th" }, allowed(props))));
}
function Thead(props) {
    var children = props.children;
    return (React.createElement("thead", __assign({ "data-testid": "thead" }, allowed(props)), React.cloneElement(children, { inHeader: true })));
}
function Tr(props) {
    var context = useContext(HeaderContext);
    if (!context) {
        throw new Error('Tr must be used as a child of the Table component');
    }
    var headers = context.headers;
    return React.createElement(TrInner, __assign({}, props, { headers: headers }));
}
function TrInner(_a) {
    var children = _a.children, inHeader = _a.inHeader, props = __rest(_a, ["children", "inHeader"]);
    var context = useContext(HeaderContext);
    if (!context) {
        throw new Error('TrInner must be used as a child of the Table component');
    }
    var setHeaders = context.setHeaders;
    useEffect(function () {
        if (inHeader) {
            var newHeaders = React.Children.map(children, function (child) { return child === null || child === void 0 ? void 0 : child.props.children; });
            setHeaders(newHeaders);
        }
    }, [children, inHeader, setHeaders]);
    return (React.createElement("tr", __assign({ "data-testid": "tr" }, allowed(props)), children &&
        React.Children.map(children, function (child, i) {
            return child
                ? React.cloneElement(child, {
                    key: i,
                    columnKey: i,
                })
                : null;
        })));
}
export default TrInner;
export { TableWithHeaderProvider as Table, Tbody, Td, TdInner, Th, Thead, Tr, TrInner, };
