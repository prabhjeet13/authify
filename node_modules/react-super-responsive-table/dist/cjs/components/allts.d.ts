import React, { ReactNode, PropsWithChildren } from 'react';
type OmitProps = {
    inHeader?: boolean;
    columnKey?: number;
    headers?: string[];
    forwardedRef?: React.Ref<unknown>;
    className?: string;
    colSpan?: number;
    children?: ReactNode;
};
type HeaderContextType = {
    headers: string[];
    setHeaders: React.Dispatch<React.SetStateAction<string[]>>;
};
declare const HeaderContext: React.Context<HeaderContextType | undefined>;
declare function HeaderProvider({ children }: PropsWithChildren<unknown>): React.JSX.Element;
export { HeaderProvider, HeaderContext };
type TableProps = {
    className?: string;
} & OmitProps;
declare function TableWithHeaderProvider(props: TableProps): React.JSX.Element;
declare function Tbody(props: OmitProps): React.JSX.Element;
type TdProps = OmitProps & {
    columnKey?: number;
};
declare function Td(props: TdProps): React.JSX.Element;
type TdInnerProps = TdProps & {
    headers: string[];
};
declare function TdInner(props: TdInnerProps): React.JSX.Element;
declare function Th(props: OmitProps): React.JSX.Element;
declare function Thead(props: PropsWithChildren<OmitProps>): React.JSX.Element;
declare function Tr(props: OmitProps): React.JSX.Element;
type TrInnerProps = PropsWithChildren<OmitProps> & {
    headers: string[];
};
declare function TrInner({ children, inHeader, ...props }: TrInnerProps): React.JSX.Element;
export default TrInner;
export { TableWithHeaderProvider as Table, Tbody, Td, TdInner, Th, Thead, Tr, TrInner, };
